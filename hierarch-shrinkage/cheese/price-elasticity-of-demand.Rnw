\documentclass[12pt,letterpaper]{article}
\usepackage[utf8]{inputenc}
\usepackage[margin=.7in]{geometry}
\usepackage{graphicx}
\usepackage{titling}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\renewcommand{\theenumiv}{\arabic{enumiv}}
\setlength{\droptitle}{-5em}
\author{Maurice Diesendruck\vspace{-2ex}}
\title{StatMod2 - Hierarchical Models and Shrinkage - Exercises 4\vspace{-1ex}}
\begin{document}
\maketitle
\setcounter{section}{1}

\section{Price Elasticity of Demand}

<<echo=FALSE>>=
#####
# store.avgs <- aggregate(data, list(store=store), mean)
# store.avg.vol <- store.avgs[,4]
# # Subtract mean, given each store.
# for (i in 1:n) {
#   st <- data[i,1]
#   av <- store.avgs[store.avgs[,1]==st,4]
#   Y[i] = Y[i] - av
# }

#####
# # Set up X to a column indicator for each store, plus three columns for price,
# # volume, and display, respectively.
# X <- matrix(0, nrow=n, ncol=p)
# for (i in 1:n) {
#   # Record store indicator.
#   name <- data$store[i]
#   store.index <- match(name, store.names)
#   X[i, store.index] <- 1
#   # Record price, volume, and display setting.
#   X[i, p-2] <- data$price[i]
#   X[i, p-1] <- data$vol[i]
#   X[i, p] <- data$disp[i]
# }

#####
library(knitr)

# Fetch and prepare data.
path <- paste("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/",
  "hierarch-shrinkage/cheese", sep="")
setwd(path)
data <- read.csv("cheese.csv")
data$log.Q <- log(data$vol)
data$log.P <- log(data$price)
attach(data)
n <- dim(data)[1]
store.names <- unique(data$store)
n.iter <- 100

betas <- 

# Execute Gibbs sampler for all stores.
Execute <- function() {
  num.stores <- length(store.names)
  PARAMS.BY.STORE <- matrix(NA, nrow=num.stores, ncol=5)
  for (i in 1:num.stores) {
    name <- store.names[i]
    store.data <- data[which(data$store==name),]
    PARAMS.BY.STORE[i,] <- c(name, Gibbs(store.data))
  }
}

# Initialize hyper parameters.
Init <- function() {
  a0=0.01; t1sq=1; b0=0.01; t2sq=1; g0=0.01; t3sq=1; d0=0.01; t4sq=1; sigsq=1;
  log.a <- rnorm(1, a0, t1sq)
  b <- rnorm(1, b0, t2sq)
  g <- rnorm(1, g0, t3sq)
  d <- rnorm(1, d0, t4sq)
  return (params=list(a0=a0, t1sq=t1sq, b0=b0, t2sq=t2sq, g0=g0, t3sq=t3sq,
                      d0=d0, t4sq=t4sq, sigsq=sigsq, log.a=log.a, b=b, g=g,
                      d=d))
}

# Run Gibbs on one store's dataset.
Gibbs <- function(store.data) {
  n.i <- dim(store.data)[1]
  init.params <- Init()
  a0 <- init.params$a0; t1sq <- init.params$t1sq;
  b0 <- init.params$b0; t2sq <- init.params$t2sq;
  g0 <- init.params$g0; t3sq <- init.params$t3sq;
  d0 <- init.params$d0; t4sq <- init.params$t4sq;
  sigsq <- init.params$sigsq
  log.a <- init.params$log.a; b <- init.params$b;
  g <- init.params$g;         d <- init.params$d;
  within.store.params <- NULL
  within.store.params <- rbind(within.store.params, c(log.a, b, g, d))
  
  for (t in 1:n.iter) {
    log.a <- Sample.log.a(t1sq, n.i, sigsq, a0, b, g, d, store.data)
    b <- Sample.b(t2sq, n.i, sigsq, b0, a, g, d, store.data)
    g <- Sample.g(t3sq, n.i, sigsq, g0, a, b, d, store.data)
    d <- Sample.d(t4sq, n.i, sigsq, d0, a, b, g, store.data)
    within.store.params <- rbind(within.store.params, c(log.a, b, g, d))
  }
  
  plot(1:(n.iter+1),within.store.params[,1])
  plot(1:(n.iter+1),within.store.params[,2])
  plot(1:(n.iter+1),within.store.params[,3])
  plot(1:(n.iter+1),within.store.params[,4])
  
  mean.params <- colMeans(within.store.params)
  return (mean.params)
}

Sample.log.a <- function(t1sq, n.i, sigsq, a0, b, g, d, store.data) {
  var <- solve(1/t1sq + n.i/sigsq)
  mean <- var*(a0/t1sq + (sum(store.data$log.Q) - 
                          b*sum(store.data$log.P) -
                          g*sum(store.data$disp) - 
                          d*sum(store.data$log.P*store.data$disp))/sigsq)
  log.a <- rnorm(1, mean, sqrt(var))
  return (log.a)
}
Sample.b <- function(t2sq, n.i, sigsq, b0, a, g, d, store.data) {
  var <- solve(1/t2sq + n.i/sigsq)
  mean <- var*(b0/t2sq + (sum(store.data$log.Q) - 
                          n.i*log.a -
                          g*sum(store.data$disp) - 
                          d*sum(store.data$log.P*store.data$disp))/sigsq)
  b <- rnorm(1, mean, sqrt(var))
  return (b)
}
Sample.g <- function(t3sq, n.i, sigsq, g0, a, b, d, store.data) {
  var <- solve(1/t3sq + n.i/sigsq)
  mean <- var*(g0/t3sq + (sum(store.data$log.Q) - 
                          n.i*log.a -
                          b*sum(store.data$log.P) -
                          d*sum(store.data$log.P*store.data$disp))/sigsq)
  g <- rnorm(1, mean, sqrt(var))
  return (g)
}
Sample.d <- function(t4sq, n.i, sigsq, d0, a, b, g, store.data) {
  var <- solve(1/t4sq + n.i/sigsq)
  mean <- var*(d0/t4sq + (sum(store.data$log.Q) -
                          n.i*log.a -
                          b*sum(store.data$log.P) -
                          g*sum(store.data$disp))/sigsq)
  d <- rnorm(1, mean, sqrt(var))
  return (d)
}

Execute()


@

\end{document}


