#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t]-mses[t-1])
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
print (summary(mses))
Backfit <- function(q) {
# Do t iterations.
while (delta > 0.05) {
# Rather than convergence, I record all MSEs for review, below.
# Do for each partial residual (kth predictor).
#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t]-mses[t-1])
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
mses <- NULL
mses[0]
mses[1] <- 50
mses
mses[0]
mses <- Backfit(q)
delta <- 100
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
mses <- NULL
Backfit <- function(q) {
delta <- 100
# Do t iterations.
while (delta > 0.05) {
# Rather than convergence, I record all MSEs for review, below.
# Do for each partial residual (kth predictor).
#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t]-mses[t-1])
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting/statmod-backfitting-lowess.R', echo=TRUE)
Backfit <- function(q) {
delta <- 100
t <- 1
# Do t iterations, until convergence criterion.
while (delta > 0.05) {
# Rather than convergence, I record all MSEs for review, below.
# Do for each partial residual (kth predictor).
#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t]-mses[t-1])
t <- t+1
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
# StatMod2 - Backfitting HW - Exercices 4
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
mses <- c(1000)
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting/statmod-backfitting-lowess.R', echo=TRUE)
# StatMod2 - Backfitting HW - Exercices 4
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
mses <- c(1000)
delta <- 100
t <- 1
k=2
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t]-mses[t-1])
t <- t+1
delta
mses
mses[t]
t
mses <- c(1000)
mses
mses[1]
delta <- 100
t <- 1
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
mses[t]
mses
mses[t-1]
# StatMod2 - Backfitting HW - Exercices 4
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
Backfit <- function(q) {
mses <- c(1000)
delta <- 100
t <- 1
# Do t iterations, until convergence criterion.
while (delta > 0.05) {
# Rather than convergence, I record all MSEs for review, below.
# Do for each partial residual (kth predictor).
#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
# To not index mses[t-1], first real value is mses[2].
delta <- abs(mses[t+1]-mses[t])
t <- t+1
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
# StatMod2 - Backfitting HW - Exercices 4
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
mses <- c(1000)
delta <- 100
t <- 1
delta
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t] <- mean((y - a - colSums(f))^2)
# To not index mses[t-1], first real value is mses[2].
delta <- abs(mses[t+1]-mses[t])
delta
mses[t+1]
mses[t+1] <- mean((y - a - colSums(f))^2)
delta <- abs(mses[t+1]-mses[t])
delta
mses[t+1]
mses[t]
mses[1]
mses <- c(1000)
mses
mses[t+1] <- mean((y - a - colSums(f))^2)
mses
delta <- abs(mses[t+1]-mses[t])
delta
# StatMod2 - Backfitting HW - Exercices 4
library(stats)
setwd("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting")
#setwd("~/Documents/latex")
data <- read.csv("air.csv")
data <- data[order(data[, 1]), ]
y <- as.matrix(data$Ozone)
x <- data[,c("Solar.R","Wind","Temp")]
n <- length(data[,1])
p <- dim(x)[2]
times <- 50
# Initialize alpha, f, and mses.
a <- mean(y)
f <- array(0, dim=c(p, n))
Backfit <- function(q) {
mses <- c(1000)
delta <- 100
t <- 1
# Do t iterations, until convergence criterion.
while (delta > 0.05) {
# Rather than convergence, I record all MSEs for review, below.
# Do for each partial residual (kth predictor).
#for (k in c(1, 2, 3)) {
#for (k in c(3, 2, 1)) {
for (k in c(2, 1, 3)) {
# Remove one column, to make p-1 by 1 matrix.
f.minus.k <- as.matrix(f[-k,])
# Prepare value to smooth; the Yi - a - sum(...).
to.smooth <- rep(0, n)
for (i in 1:n) {
to.smooth[i] <- y[i] - a - sum(f.minus.k[,i])
}
# Fit kth residual against kth column of x.
partial.data <- cbind(y, x[k],to.smooth)
partial.data <- partial.data[order(partial.data[,2]),]
predicted <- rep(0, n)
predicted <- lowess(partial.data[,c(2,3)], f=.1)$y
# Plot stuff.
if (k==q) {
if (t==1) {
plot(t(x[k]), to.smooth, main=paste("Fitting Residuals on X", k),
ylim=c(-50,100), xlab="X Value", ylab="Residual Value")
}
if (t>10) {
lines(partial.data[,2], predicted, col=t)
}
}
# Attach predicted values to a resorted (by y) matrix.
to.sort <- cbind(partial.data, predicted)
resorted <- to.sort[order(to.sort[,1]),]
# Record K-th predictor for t-th iteration.
f[k,] <- resorted$predicted - mean(resorted$predicted)
}
mses[t+1] <- mean((y - a - colSums(f))^2)
# To not index mses[t-1], first real value is mses[2].
delta <- abs(mses[t+1]-mses[t])
t <- t+1
}
return (mses)
}
par(mfrow=c(3,1))
for (q in 1:p) {
mses <- Backfit(q)
}
t
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting/statmod-backfitting-lowess.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/backfitting/statmod-backfitting-lowess.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mses
count(mses)
print (length(mses))
print (summary(mses))
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/gibbs/statmod-gibbs.R', echo=TRUE)
install.packages("BayesBridge")
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/gibbs/statmod-gibbs.R', echo=TRUE)
