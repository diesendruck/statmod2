n <- length(state.counts)
C <- ginv(diag(x=(state.counts+1/tausq), n))
mean <- C%*%(t(X[,fixed.eff])%*%(z - X[,random.eff]%*%beta))
mu <- mvrnorm(1, mu=mean, Sigma=C)
return (mu)
}
sample.tausq <- function(n.states, mu) {
shape <- n.states/2 + 1
rate <- 1/2*(t(mu)%*%mu)
tausq.inv <- rgamma(1, shape=shape, rate=rate)
return (1/tausq.inv)
}
sample.beta <- function(tausq, X, y, mu, z) {
XtX <- t(X[,random.eff])%*%X[,random.eff]
XtOut <- t(X[,random.eff])%*%(z - X[,fixed.eff]%*%mu)
C <- ginv(XtX)
mean <- C%*%(XtOut)
beta <- mvrnorm(1, mu=mean, Sigma=C)
return (beta)
}
#####
# EVALUATE RESULTS.
results <- Gibbs(y, X, n.iter=100)
chain <- results$CHAINS
chain.mu <- chain[,fixed.eff]
chain.beta <- chain[,random.eff]
chain.tausq <- chain[,ncol(X)]
n.iter <- results$n.iter
# Show boxplots for each state's chain of Mu's.
par(las=1)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
o <- order(apply(chain.beta, 2, median))
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
# StatMod2 - Polls
library(MASS)
library(truncnorm)
library(reshape)
#####
# SUMMARIZE.
# Albert and Chib (1993) present exact Bayesian methods for posterior sampling
# of binary response data. Where a probit regression would normally be used,
# they augment the model by introducing a left- or right-truncated normal
# variable Z, that corresponds to 1- or 0-valued y response, respectively.
# In doing so, the model enables standard linear model results for normal-normal
# posteriors, which can be used to find full conditionals for Gibbs sampling.
#####
# LOAD DATA.
# Load and investigate data.
data <- read.csv("polls.csv")
attach(data)
#aggregate(data, by=list(state=state), FUN=mean)
#subset(data, is.na(bush) & state=="CA", select=c(bush, state))
#####
# CLEAN DATA.
# Remove NA's.
d <- subset(data, !is.na(bush))
d <- subset(d, select=c(bush, state, edu, age, female, black))
#####
# BUILD DESIGN MATRIX.
y <- d$bush
# Add indicators: all 49 states (fixed effects); then with an intercept, with
# baselines for edu and age, plus female and black (random effects). The
# baseline is Bacc/18to29/!female/!black. The fixed effects are used to select
# values/sum over values based on state. The random effects are (1, HS, NoHS,
# SomeColl, age30to44, age45to60, age65plus, female, black), which is a vector
# for each respondent. Thus, the Beta vector has a first term associated with
# the intercept for the baseline person.
X <- model.matrix(~-1+state, d)
X <- cbind(X, model.matrix(~edu+age+female+black, d))
# Initialize operational variables.
n.states <- length(unique(d$state))
fixed.eff <- 1:n.states
random.eff <- (n.states+1):(dim(X)[2])
#####
# DO SOME EXPLORATORY OLS.
f1 <- lm(y~X)
f2 <- lm(data$bush ~ data$state+data$edu+data$age+data$female+data$black)
#####
# DO GIBBS SAMPLER.
Gibbs <- function(y, X, n.iter=100) {
# Initialize mu, beta, tausq, n.i, for first iteration of Gibbs.
mu <- rep(0, length(fixed.eff))
beta <- rep(0, length(random.eff))
tausq <- 1
state.counts <- colSums(X[,fixed.eff])
CHAINS <- matrix(NA, nrow=n.iter, ncol=n.states+length(beta)+length(tausq))
# Do Gibbs many times.
for (iter in 1:n.iter) {
z <- sample.z(mu, beta, y, X)
mu <- sample.mu(state.counts, tausq, z, X, beta)
tausq <- sample.tausq(n.states, mu)
beta <- sample.beta(tausq, X, y, mu, z)
CHAINS[iter,] <- c(mu, beta, tausq)
}
colnames(CHAINS) <- c(substring(colnames(X[,fixed.eff]),6,7),
colnames(X[,random.eff]), "tausq")
return (list(CHAINS=CHAINS, n.iter=n.iter))
}
sample.z <- function(mu, beta, y, X) {
n <- length(y)
z <- rep(NA, n)
for (i in 1:n) {
if (y[i]==1) {
z[i] <- rtruncnorm(1, a=0,
mean=mu%*%X[i,fixed.eff]+X[i,random.eff]%*%beta, sd=1)
}
if (y[i]==0) {
z[i] <- rtruncnorm(1, b=0,
mean=mu%*%X[i,fixed.eff]+X[i,random.eff]%*%beta, sd=1)
}
}
return (z)
}
sample.mu <- function(state.counts, tausq, z, X, beta) {
n <- length(state.counts)
C <- ginv(diag(x=(state.counts+1/tausq), n))
mean <- C%*%(t(X[,fixed.eff])%*%(z - X[,random.eff]%*%beta))
mu <- mvrnorm(1, mu=mean, Sigma=C)
return (mu)
}
sample.tausq <- function(n.states, mu) {
shape <- n.states/2 + 1
rate <- 1/2*(t(mu)%*%mu)
tausq.inv <- rgamma(1, shape=shape, rate=rate)
return (1/tausq.inv)
}
sample.beta <- function(tausq, X, y, mu, z) {
XtX <- t(X[,random.eff])%*%X[,random.eff]
XtOut <- t(X[,random.eff])%*%(z - X[,fixed.eff]%*%mu)
C <- ginv(XtX)
mean <- C%*%(XtOut)
beta <- mvrnorm(1, mu=mean, Sigma=C)
return (beta)
}
#####
# EVALUATE RESULTS.
results <- Gibbs(y, X, n.iter=100)
chain <- results$CHAINS
chain.mu <- chain[,fixed.eff]
chain.beta <- chain[,random.eff]
chain.tausq <- chain[,ncol(X)]
n.iter <- results$n.iter
# Show boxplots for each state's chain of Mu's.
par(las=1)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
o <- order(apply(chain.beta, 2, median))
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
# StatMod2 - Polls
library(MASS)
library(truncnorm)
library(reshape)
#####
# SUMMARIZE.
# Albert and Chib (1993) present exact Bayesian methods for posterior sampling
# of binary response data. Where a probit regression would normally be used,
# they augment the model by introducing a left- or right-truncated normal
# variable Z, that corresponds to 1- or 0-valued y response, respectively.
# In doing so, the model enables standard linear model results for normal-normal
# posteriors, which can be used to find full conditionals for Gibbs sampling.
#####
# LOAD DATA.
# Load and investigate data.
data <- read.csv("polls.csv")
attach(data)
#aggregate(data, by=list(state=state), FUN=mean)
#subset(data, is.na(bush) & state=="CA", select=c(bush, state))
#####
# CLEAN DATA.
# Remove NA's.
d <- subset(data, !is.na(bush))
d <- subset(d, select=c(bush, state, edu, age, female, black))
#####
# BUILD DESIGN MATRIX.
y <- d$bush
# Add indicators: all 49 states (fixed effects); then with an intercept, with
# baselines for edu and age, plus female and black (random effects). The
# baseline is Bacc/18to29/!female/!black. The fixed effects are used to select
# values/sum over values based on state. The random effects are (1, HS, NoHS,
# SomeColl, age30to44, age45to60, age65plus, female, black), which is a vector
# for each respondent. Thus, the Beta vector has a first term associated with
# the intercept for the baseline person.
X <- model.matrix(~-1+state, d)
X <- cbind(X, model.matrix(~edu+age+female+black, d))
# Initialize operational variables.
n.states <- length(unique(d$state))
fixed.eff <- 1:n.states
random.eff <- (n.states+1):(dim(X)[2])
#####
# DO SOME EXPLORATORY OLS.
f1 <- lm(y~X)
f2 <- lm(data$bush ~ data$state+data$edu+data$age+data$female+data$black)
#####
# DO GIBBS SAMPLER.
Gibbs <- function(y, X, n.iter=100) {
# Initialize mu, beta, tausq, n.i, for first iteration of Gibbs.
mu <- rep(0, length(fixed.eff))
beta <- rep(0, length(random.eff))
tausq <- 1
state.counts <- colSums(X[,fixed.eff])
CHAINS <- matrix(NA, nrow=n.iter, ncol=n.states+length(beta)+length(tausq))
# Do Gibbs many times.
for (iter in 1:n.iter) {
z <- sample.z(mu, beta, y, X)
mu <- sample.mu(state.counts, tausq, z, X, beta)
tausq <- sample.tausq(n.states, mu)
beta <- sample.beta(tausq, X, y, mu, z)
CHAINS[iter,] <- c(mu, beta, tausq)
}
colnames(CHAINS) <- c(substring(colnames(X[,fixed.eff]),6,7),
colnames(X[,random.eff]), "tausq")
return (list(CHAINS=CHAINS, n.iter=n.iter))
}
sample.z <- function(mu, beta, y, X) {
n <- length(y)
z <- rep(NA, n)
for (i in 1:n) {
if (y[i]==1) {
z[i] <- rtruncnorm(1, a=0,
mean=mu%*%X[i,fixed.eff]+X[i,random.eff]%*%beta, sd=1)
}
if (y[i]==0) {
z[i] <- rtruncnorm(1, b=0,
mean=mu%*%X[i,fixed.eff]+X[i,random.eff]%*%beta, sd=1)
}
}
return (z)
}
sample.mu <- function(state.counts, tausq, z, X, beta) {
n <- length(state.counts)
C <- ginv(diag(x=(state.counts+1/tausq), n))
mean <- C%*%(t(X[,fixed.eff])%*%(z - X[,random.eff]%*%beta))
mu <- mvrnorm(1, mu=mean, Sigma=C)
return (mu)
}
sample.tausq <- function(n.states, mu) {
shape <- n.states/2 + 1
rate <- 1/2*(t(mu)%*%mu)
tausq.inv <- rgamma(1, shape=shape, rate=rate)
return (1/tausq.inv)
}
sample.beta <- function(tausq, X, y, mu, z) {
XtX <- t(X[,random.eff])%*%X[,random.eff]
XtOut <- t(X[,random.eff])%*%(z - X[,fixed.eff]%*%mu)
C <- ginv(XtX)
mean <- C%*%(XtOut)
beta <- mvrnorm(1, mu=mean, Sigma=C)
return (beta)
}
#####
# EVALUATE RESULTS.
results <- Gibbs(y, X, n.iter=100)
chain <- results$CHAINS
chain.mu <- chain[,fixed.eff]
chain.beta <- chain[,random.eff]
chain.tausq <- chain[,ncol(X)]
n.iter <- results$n.iter
# Show boxplots for each state's chain of Mu's.
#par(las=1)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
o <- order(apply(chain.beta, 2, median))
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
dim(chain.tausq)
boxplot(chain.tausq, horizontal=T)
boxplot(chain.tausq, horizontal=T, outline=F)
boxplot(chain.tausq, horizontal=T, outline=F, cex.axis=.6)
boxplot(chain.tausq, horizontal=T, outline=F)
boxplot(chain.tausq, horizontal=T, outline=F)
boxplot(chain.tausq, horizontal=T, outline=F)
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
o <- order(apply(chain.beta, 2, median))
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
boxplot(chain.tausq, horizontal=T, outline=F)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
dfx = data.frame(ev1=1:10, ev2=sample(10:99, 10), ev3=10:1)
symbols(x=dfx$ev1, y=dfx$ev2, circles=sqrt(dfx$ev3/pi), inches=1/3, ann=F, bg="steelblue2", fg=NULL)
colMeans(chain.mu)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=sample(10:99, 10), ev3=10:1)
symbols(x=dfx$ev1, y=dfx$ev2, circles=sqrt(dfx$ev3/pi), inches=1/3, ann=F, bg="steelblue2", fg=NULL)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=sample(10:99, 10))
dfx = data.frame(ev1=colMeans(chain.mu))
sample(10:99, 10)
colnames(chain.mu)
help(symbols)
colSums[X[,fixed.eff]]
colsums[X[,fixed.eff]]
help(colsum)
??colsum
X[,fixed.eff]
colSums(X[,fixed.eff])
state.counts
state.counts <- colSums(X[,fixed.eff])
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=sqrt(dfx$ev3/pi), inches=1/3, ann=F, bg="steelblue2", fg=NULL)
symbols(x=dfx$ev1, y=dfx$ev2, circles=sqrt(dfx$ev3), inches=1/3, ann=F, bg="steelblue2", fg=NULL)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=sqrt(dfx$ev3), inches=1/3, ann=F, bg="steelblue2", fg=NULL)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F, bg="steelblue2", fg=NULL)
help(symbols)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, ylab=colnames(chain.mu))
colnames(chain.mu)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, ylab=colnames(chain.mu))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, xlab=colnames(chain.mu))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, ylab=colnames(chain.mu))
colnames(chain.mu)
typeof(colnames(chain.mu))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx
dfx$ev2
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=as.character(dfx$ev2), circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, ylab=colnames(chain.mu))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=as.character(dfx$ev2), circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
symbols(x=dfx$ev1, y=dfx$ev2, circles=dfx$ev3, inches=1/3, ann=F,
bg="steelblue2", fg=NULL, ylab=colnames(chain.mu))
dfx <- dfx[order(dfx[1,,]),,]
dfx
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx
dfx <- dfx[order(dfx$ev1),]
dfx
dotchart(dfx$ev1, labels=colnames(chain.mu))
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7)
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, color="steelblue2")
help(dotchart)
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, gcolor="steelblue2")
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, gcolor="steelblue2")
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2")
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL)
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21)
par(las=1)
o <- order(apply(chain.mu, 2, median)) # Order chains by median.
boxplot(chain.mu[,o], horizontal=T, outline=F, cex.axis=0.5); abline(v=0)
o <- order(apply(chain.beta, 2, median))
boxplot(chain.beta[,o], horizontal=T, outline=F, cex.axis=.6); abline(v=0)
boxplot(chain.tausq, horizontal=T, outline=F)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(dfx$ev1),]
dotchart(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21)
help(dotchart2)
library(Hmisc)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(dfx$ev1),]
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=dfx$ev3)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[-order(dfx$ev1),]
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(-1*dfx$ev1),]
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3))
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(-1*dfx$ev1),]
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.6, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, dotsize=sqrt(dfx$ev3)/2)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=T)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=1.1)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=1.5)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
state.counts
dfx
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx
dfx <- dfx[order(-1*dfx$ev1),]
dfx
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(dfx$ev1),]
dfx
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx$ev2, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx[,1:2], labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx[,2], labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx[,1], labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dfx$ev1
dfx$ev3
dotchart2(dfx$ev1, labels=colnames(chain.mu), cex=.7, bg="steelblue2",
fg=NULL, pch=21, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dfx = data.frame(ev1=colMeans(chain.mu), ev2=colnames(chain.mu),
ev3=state.counts)
dfx <- dfx[order(-dfx$ev1),]
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1)
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7, bg="steelblue2",
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1, lcolor="gray")
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7, bg="steelblue2",
fg=NULL, pch=16, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, lty=1, lcolor="gray")
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=16, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray")
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=19, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray")
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray")
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
main=bquote(bar(mu)))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
main=bquote(~bar(mu)))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
main=bquote(mu[i]~"per state"))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
main=bquote(""~mu[i]~"per state"))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
auxtitle=bquote(""~mu[i]~"per state"))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray",
auxtitle=bquote(""~mu[i]~"per state"))
dotchart2(dfx$ev1, labels=dfx$ev2, cex=.7,
fg=NULL, pch=21, dotsize=sqrt(dfx$ev3)/2, add=F, ann=F,
width.factor=2.5, bg="steelblue2", lty=1, lcolor="gray")
