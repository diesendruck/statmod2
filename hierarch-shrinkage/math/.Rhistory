init <- function() { # initialize parameters
a=1; b=1; c=1; d=1;
sigmasq <- 1/(rgamma(1, a, b))
tausq <- 1/(rgamma(1, c, d))
mu.val <- runif(1, 40, 60)
mu <- rep(mu.val, n)
return (params=list(tausq=tausq, sigmasq=sigmasq, mu=mu,
a=a, b=b, c=c, d=d))
}
gibbs <- function(n.iter, verbose) {
PARAMS <- NULL
params <- init()
tausq <- params$tausq
sigmasq <- params$sigmasq
mu <- params$mu
a <- params$a
b <- params$b
c <- params$c
d <- params$d
for (t in 1:n.iter) { # loop over iterations
theta <- sample.theta(sigmasq, tausq, mu)
sigmasq <- sample.sigmasq(theta)
tausq <- sample.tausq(theta, mu)
mu <- sample.mu(theta, tausq)
## Save iteration. First p columns are theta; followed by others.
PARAMS <- rbind(PARAMS, c(theta, sigmasq, tausq, mu))
}
return(list(PARAMS=PARAMS))
}
sample.theta <- function(sigmasq, tausq, mu) {
cov <- solve(I.n/sigmasq+I.n/tausq)
mean <- cov%*%(y/sigmasq-mu/tausq)
theta <- mvrnorm(1, mu=mean, Sigma=cov)
return (theta)
}
sample.sigmasq <- function(theta) {
shape <- n/2 + a
rate <- t(y-theta)%*%(y-theta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(theta, mu) {
shape <- p/2 + c
rate <- t(theta-mu)%*%(theta-mu)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
sample.mu <- function(theta, tausq) {
avg <- mean(theta)
mu <- mvrnorm(1, mu=avg, Sigma=tausq*I.n)
return (mu)
}
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
gibbs <- function(n.iter, verbose) {
PARAMS <- NULL
params <- init()
tausq <- params$tausq
sigmasq <- params$sigmasq
mu <- params$mu
a <- params$a
b <- params$b
c <- params$c
d <- params$d
for (t in 1:n.iter) { # loop over iterations
theta <- sample.theta(sigmasq, tausq, mu)
sigmasq <- sample.sigmasq(theta, a, b)
tausq <- sample.tausq(theta, mu, c, d)
mu <- sample.mu(theta, tausq)
## Save iteration. First p columns are theta; followed by others.
PARAMS <- rbind(PARAMS, c(theta, sigmasq, tausq, mu))
}
return(list(PARAMS=PARAMS))
}
sample.theta <- function(sigmasq, tausq, mu) {
cov <- solve(I.n/sigmasq+I.n/tausq)
mean <- cov%*%(y/sigmasq-mu/tausq)
theta <- mvrnorm(1, mu=mean, Sigma=cov)
return (theta)
}
sample.sigmasq <- function(theta, a, b) {
shape <- n/2 + a
rate <- t(y-theta)%*%(y-theta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(theta, mu, c, d) {
shape <- p/2 + c
rate <- t(theta-mu)%*%(theta-mu)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
sample.mu <- function(theta, tausq) {
avg <- mean(theta)
mu <- mvrnorm(1, mu=avg, Sigma=tausq*I.n)
return (mu)
}
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
y.bars <- school.avgs
y.sizes <- school.ssizes
school.avgs <- aggregate(data, list(school=school), mean)[,3]
school.ssizes <- aggregate(data, list(school=school), length)[,3]
library(MASS)
data <- read.csv("mathtest.csv")
n <- dim(data)[1]
I.n <- diag(n)
y <- data$mathscore
y.bars <- school.avgs
y.sizes <- school.ssizes
p <- length(ybars)
school.avgs <- aggregate(data, list(school=school), mean)[,3]
school.ssizes <- aggregate(data, list(school=school), length)[,3]
y.bars <- school.avgs
y.sizes <- school.ssizes
y.bars
y.sizes <- school.ssizes
y.sizes
plot(y.sizes,y.bars)
sum(y.sizes)
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
# StatMod2 - Gibbs - Exercises 4
library(MCMCpack)
library(BayesBridge)
library(MASS)
# Get data and initialize constants.
data(diabetes, package="BayesBridge")
y <- diabetes$y
y <- y - mean(y);
X <- diabetes$x
XtX <- t(X)%*%X
Xty <- t(X)%*%y
n <- dim(X)[1]
p <- dim(X)[2]
I.p <- diag(p)
a=1; b=1; c=1; d=1;
init <- function() { # initialize parameters
sigmasq <- 1/(rgamma(1, a/2, b/2))
tausq <- 1/(rgamma(1, c/2, d/2))
return (theta=list(tausq=tausq, sigmasq=sigmasq))
}
gibbs <- function(n.iter, verbose) {
THETA <- NULL
theta <- init()
tausq <- theta$tausq
sigmasq <- theta$sigmasq
a <- theta$a
b <- theta$b
c <- theta$c
d <- theta$d
for (i in 1:n.iter) { # loop over iterations
beta <- sample.beta(sigmasq, tausq)
sigmasq <- sample.sigmasq(beta)
tausq <- sample.tausq(beta)
if (verbose > 0){
if (i %% 10 == 0) {
# print short summary, for every 10th iteration
print(paste("Iteration: ", i))
print(round(z, 2))
print(round(q, 2))
print(round(r, 2))
print(round(pistar, 2))
}
}
## Save iteration. First p columns are Beta; followed by sigmasq, tausq.
THETA <- rbind(THETA, c(beta, sigmasq, tausq))
}
return(list(THETA=THETA))
}
sample.beta <- function(sigmasq, tausq) {
cov <- ginv(XtX/sigmasq+I.p/tausq)
mean <- cov%*%(Xty/sigmasq)
beta <- mvrnorm(1, mu=mean, Sigma=cov)
return (beta)
}
sample.sigmasq <- function(beta) {
shape <- n/2 + a
rate <- t(y-X%*%beta)%*%(y-X%*%beta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(beta) {
shape <- p/2 + c
rate <- t(beta)%*%(beta)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
its <- 1:n.iter
par(mfrow=c(5,2))
for (i in 1:p) {
## trajectory plot of Beta_1 (out of Beta_1,...,Beta_p).
plot(its, THETA[,p],xlab="ITER",ylab="Beta",bty="l",type="l",
main=paste("Trajectories of Beta", i))
}
plot(its, THETA[,p+1],xlab="ITER",ylab="SigmaSq",bty="l",type="l",
main="Trajectories of SigmaSq")
par(mfrow=c(5,2))
for (i in 1:p) {
## trajectory plot of Beta_1 (out of Beta_1,...,Beta_p).
plot(its, THETA[,p],xlab="ITER",ylab="Beta",bty="l",type="l",
main=paste("Trajectories of Beta", i))
}
## trajectory plot of SigmaSq
plot(its, THETA[,p+1],xlab="ITER",ylab="SigmaSq",bty="l",type="l",
main="Trajectories of SigmaSq")
par(mfrow=c(5,2))
for (i in 1:p) {
## trajectory plot of Beta_1 (out of Beta_1,...,Beta_p).
plot(its, THETA[,p],xlab="ITER",ylab="Beta",bty="l",type="l",
main=paste("Trajectories of Beta", i))
}
THETA
dim(THETA)
colMeans(THETA)
fit <- lm(y~ X-1)
summary(fit)
colMeans(THETA)
# StatMod2 - Gibbs - Exercises 4
library(MCMCpack)
library(BayesBridge)
library(MASS)
# Get data and initialize constants.
data(diabetes, package="BayesBridge")
y <- diabetes$y
y <- y - mean(y);
X <- diabetes$x
XtX <- t(X)%*%X
Xty <- t(X)%*%y
n <- dim(X)[1]
p <- dim(X)[2]
I.p <- diag(p)
a=1; b=1; c=1; d=1;
# Compare to basic OLS.
fit <- lm(y~ X-1)
init <- function() { # initialize parameters
sigmasq <- 1/(rgamma(1, a/2, b/2))
tausq <- 1/(rgamma(1, c/2, d/2))
return (theta=list(tausq=tausq, sigmasq=sigmasq))
}
gibbs <- function(n.iter, verbose) {
THETA <- NULL
theta <- init()
tausq <- theta$tausq
sigmasq <- theta$sigmasq
a <- theta$a
b <- theta$b
c <- theta$c
d <- theta$d
for (i in 1:n.iter) { # loop over iterations
beta <- sample.beta(sigmasq, tausq)
sigmasq <- sample.sigmasq(beta)
tausq <- sample.tausq(beta)
if (verbose > 0){
if (i %% 10 == 0) {
# print short summary, for every 10th iteration
print(paste("Iteration: ", i))
print(round(z, 2))
print(round(q, 2))
print(round(r, 2))
print(round(pistar, 2))
}
}
## Save iteration. First p columns are Beta; followed by sigmasq, tausq.
THETA <- rbind(THETA, c(beta, sigmasq, tausq))
}
return(list(THETA=THETA))
}
sample.beta <- function(sigmasq, tausq) {
cov <- ginv(XtX/sigmasq+I.p/tausq)
mean <- cov%*%(Xty/sigmasq)
beta <- mvrnorm(1, mu=mean, Sigma=cov)
return (beta)
}
sample.sigmasq <- function(beta) {
shape <- n/2 + a
rate <- t(y-X%*%beta)%*%(y-X%*%beta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(beta) {
shape <- p/2 + c
rate <- t(beta)%*%(beta)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
ex <- function() {
## RUN these lines to get the plots
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
its <- 1:n.iter
par(mfrow=c(5,2))
for (i in 1:p) {
## trajectory plot of Beta_1 (out of Beta_1,...,Beta_p).
plot(its, THETA[,p],xlab="ITER",ylab="Beta",bty="l",type="l",
main=paste("Trajectories of Beta", i))
}
## trajectory plot of SigmaSq
plot(its, THETA[,p+1],xlab="ITER",ylab="SigmaSq",bty="l",type="l",
main="Trajectories of SigmaSq")
## trajectory plot of TauSq
plot(its, THETA[,p+2],xlab="ITER",ylab="TauSq",bty="l",type="l",
main="Trajectories of TauSq")
}
ex()
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
its <- 1:n.iter
plot(its, THETA[500:600,p+1])
plot(its[500:600], THETA[500:600,p+1])
library(stats)
library(knitr)
path <- paste("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/",
"hierarch-shrinkage/math", sep="")
setwd(path)
data <- read.csv("mathtest.csv")
attach(data)
boxplot(mathscore ~ school, xlab="School", ylab="Score")
school.avgs <- aggregate(data, list(school=school), mean)[,3]
school.ssizes <- aggregate(data, list(school=school), length)[,3]
plot(cbind(school.avgs, school.ssize))
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
PARAMS <- gbs$PARAMS
its <- 1:n.iter
theta.hat <- colMeans(PARAMS[,1:p])
print(theta.hat)
library(MASS)
data <- read.csv("mathtest.csv")
n <- dim(data)[1]
p <- max(data$school)
I.n <- diag(n)
I.p <- diag(p)
one.p  <- rep(1, p)
# Make X matrix, with indicators for school.
X <- matrix(0, n, p)
for (i in 1:n) {
school.num <- data$school[i]
X[i,school.num] <- 1
}
y <- data$mathscore
init <- function() { # initialize parameters
a=1; b=1; c=1; d=1; m=50; v=5;
sigmasq <- 1/(rgamma(1, a, b))
tausq <- 1/(rgamma(1, c, d))
mu <- rnorm(1, m, sqrt(v))
return (params=list(tausq=tausq, sigmasq=sigmasq, mu=mu,
a=a, b=b, c=c, d=d, m=m, v=v))
}
gibbs <- function(n.iter, verbose) {
PARAMS <- NULL
params <- init()
tausq <- params$tausq
sigmasq <- params$sigmasq
mu <- params$mu
a <- params$a
b <- params$b
c <- params$c
d <- params$d
m <- params$m
v <- params$v
for (t in 1:n.iter) { # loop over iterations
theta <- sample.theta(sigmasq, tausq, mu)
sigmasq <- sample.sigmasq(theta, a, b)
tausq <- sample.tausq(theta, mu, c, d)
mu <- sample.mu(theta, tausq, m, v)
## Save iteration. First p columns are theta; followed by others.
PARAMS <- rbind(PARAMS, c(theta, sigmasq, tausq, mu))
}
return(list(PARAMS=PARAMS))
}
sample.theta <- function(sigmasq, tausq, mu) {
cov <- solve(t(X)%*%X/sigmasq + I.p/tausq)
mean <- cov%*%(t(X)%*%y/sigmasq + mu*one.p/tausq)
theta <- mvrnorm(1, mu=mean, Sigma=cov)
return (theta)
}
sample.sigmasq <- function(theta, a, b) {
shape <- n/2 + a
rate <- t(y-X%*%theta)%*%(y-X%*%theta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(theta, mu, c, d) {
shape <- p/2 + c
rate <- t(theta-mu*one.p)%*%(theta-mu*one.p)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
sample.mu <- function(theta, tausq, m, v) {
var <- solve(1/v + p/tausq)
mean <- var*(m/v + sum(theta)/tausq)
mu <- rnorm(1, mean=mean, sd=sqrt(var))
return (mu)
}
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
PARAMS <- gbs$PARAMS
its <- 1:n.iter
theta.hat <- colMeans(PARAMS[,1:p])
print(theta.hat)
dim(PARAMS)
colMeans(PARAMS[,101])
colMeans(PARAMS)
# StatMod2 - Gibbs - Exercises 4
library(MCMCpack)
library(BayesBridge)
library(MASS)
# Get data and initialize constants.
data(diabetes, package="BayesBridge")
y <- diabetes$y
y <- y - mean(y);
X <- diabetes$x
XtX <- t(X)%*%X
Xty <- t(X)%*%y
n <- dim(X)[1]
p <- dim(X)[2]
I.p <- diag(p)
a=1; b=1; c=1; d=1;
# Compare to basic OLS.
fit <- lm(y~ X-1)
init <- function() { # initialize parameters
sigmasq <- 1/(rgamma(1, a/2, b/2))
tausq <- 1/(rgamma(1, c/2, d/2))
return (theta=list(tausq=tausq, sigmasq=sigmasq))
}
gibbs <- function(n.iter, verbose) {
THETA <- NULL
theta <- init()
tausq <- theta$tausq
sigmasq <- theta$sigmasq
a <- theta$a
b <- theta$b
c <- theta$c
d <- theta$d
for (i in 1:n.iter) { # loop over iterations
beta <- sample.beta(sigmasq, tausq)
sigmasq <- sample.sigmasq(beta)
tausq <- sample.tausq(beta)
if (verbose > 0){
if (i %% 10 == 0) {
# print short summary, for every 10th iteration
print(paste("Iteration: ", i))
print(round(z, 2))
print(round(q, 2))
print(round(r, 2))
print(round(pistar, 2))
}
}
## Save iteration. First p columns are Beta; followed by sigmasq, tausq.
THETA <- rbind(THETA, c(beta, sigmasq, tausq))
}
return(list(THETA=THETA))
}
sample.beta <- function(sigmasq, tausq) {
cov <- ginv(XtX/sigmasq+I.p/tausq)
mean <- cov%*%(Xty/sigmasq)
beta <- mvrnorm(1, mu=mean, Sigma=cov)
return (beta)
}
sample.sigmasq <- function(beta) {
shape <- n/2 + a
rate <- t(y-X%*%beta)%*%(y-X%*%beta)/2 + b
sigmasq <- rgamma(1, shape=shape, rate=rate)
return (1/sigmasq)
}
sample.tausq <- function(beta) {
shape <- p/2 + c
rate <- t(beta)%*%(beta)/2 + d
tausq <- rgamma(1, shape=shape, rate=rate)
return (1/tausq)
}
ex <- function() {
## RUN these lines to get the plots
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
its <- 1:n.iter
par(mfrow=c(5,2))
for (i in 1:p) {
## trajectory plot of Beta_1 (out of Beta_1,...,Beta_p).
plot(its, THETA[,p],xlab="ITER",ylab="Beta",bty="l",type="l",
main=paste("Trajectories of Beta", i))
}
## trajectory plot of SigmaSq
plot(its, THETA[,p+1],xlab="ITER",ylab="SigmaSq",bty="l",type="l",
main="Trajectories of SigmaSq")
## trajectory plot of TauSq
plot(its, THETA[,p+2],xlab="ITER",ylab="TauSq",bty="l",type="l",
main="Trajectories of TauSq")
}
n.iter <- 1000; verbose=0
gbs <- gibbs(n.iter, verbose)
THETA <- gbs$THETA
its <- 1:n.iter
fit <- lm(y~ X-1)
summary(fit)
help(lm)
colMeans(THETA)
data(diabetes, package="BayesBridge")
y <- diabetes$y
y
mean(y)
y - mean(y)
plot(y)
y
