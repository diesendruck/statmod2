}
# Initialize hyper parameters.
Init <- function() {
a0=0.01; t1sq=1; b0=0.01; t2sq=1; g0=0.01; t3sq=1; sigsq=1;
log.a <- rnorm(1, a0, t1sq)
b <- rnorm(1, b0, t2sq)
g <- rnorm(1, g0, t3sq)
return (params=list(a0=a0, t1sq=t1sq, b0=b0, t2sq=t2sq, g0=g0, t3sq=t3sq,
sigsq=sigsq, log.a=log.a, b=b, g=g))
}
# Run Gibbs on one store's dataset.
Gibbs <- function(store.data) {
n.i <- dim(store.data)[1]
init.params <- Init()
a0 <- init.params$a0; t1sq <- init.params$t1sq;
b0 <- init.params$b0; t2sq <- init.params$t2sq;
g0 <- init.params$g0; t3sq <- init.params$t3sq;
sigsq <- init.params$sigsq
log.a <- init.params$log.a
b <- init.params$b
g <- init.params$g
within.store.params <- NULL
within.store.params <- rbind(within.store.params, c(log.a, b, g))
for (t in 1:n.iter) {
log.a <- Sample.log.a(t1sq, n.i, sigsq, a0, b, g, store.data)
b <- Sample.b(t2sq, n.i, sigsq, b0, a, g, store.data)
g <- Sample.g(t3sq, n.i, sigsq, g0, a, b, store.data)
within.store.params <- rbind(within.store.params, c(log.a, b, g))
}
plot(1:(n.iter+1),within.store.params[,1])
plot(1:(n.iter+1),within.store.params[,2])
plot(1:(n.iter+1),within.store.params[,3])
mean.params <- colMeans(within.store.params)
return (mean.params)
}
Sample.log.a <- function(t1sq, n.i, sigsq, a0, b, g, store.data) {
var <- solve(1/t1sq + n.i/sigsq)
mean <- var*(a0/t1sq + (sum(store.data$log.Q) -
b*sum(store.data$log.P) -
g*sum(store.data$disp))/sigsq)
log.a <- rnorm(1, mean, sqrt(var))
return (log.a)
}
Sample.b <- function(t2sq, n.i, sigsq, b0, a, g, store.data) {
var <- solve(1/t2sq + n.i/sigsq)
mean <- var*(b0/t2sq + (sum(store.data$log.Q) -
n.i*log.a -
g*sum(store.data$disp))/sigsq)
b <- rnorm(1, mean, sqrt(var))
return (b)
}
Sample.g <- function(t3sq, n.i, sigsq, g0, a, b, store.data) {
var <- solve(1/t3sq + n.i/sigsq)
mean <- var*(g0/t3sq + (sum(store.data$log.Q) -
n.i*log.a -
b*sum(store.data$log.P))/sigsq)
g <- rnorm(1, mean, sqrt(var))
return (g)
}
Execute()
store.data
name
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=500000, thin=1000)
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=expression(paste(name, beta[i])),
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=expression(paste(name, beta[i])))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
name
names(name)
name
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=c(name, expression(beta[i])))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, beta[i])))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, beta[i])))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, beta[i]))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, "beta_",i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, expression(beta), i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=expression(name ~ beta ~ i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=paste(name, expression(beta), i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(name ~ beta == .i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.name ~ beta == .i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ beta == .i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
name
i
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(paste(name, expression(beta), i))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(paste(name, expression(beta), i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote("" ~ beta == .(refer$name)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
refer=list(name=name)
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote("" ~ beta == .(refer$name)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
refer=list(name=name)
refer$name
print(refer$name)
c(refer$name, " WOO")
dim(store.data)
head(store.data)
store.names
i
store.names[i]
name <- store.names[i]
name
store.data <- data[which(data$store==name),]
store.data
refer=list(name=name)
refer$name
c(refer$name, " WOO")
typeof(store.data)
typeof(store.names)
data$store
unique(data$store)
help(unique)
typeof(data$store[1])
to.String(data$store[1])
toString(data$store[1])
store.names
store.names[i]
toString(store.names[i])
setwd(path)
data <- read.csv("cheese.csv")
data$log.Q <- log(data$vol)
data$log.P <- log(data$price)
attach(data)
n <- dim(data)[1]
store.names <- unique(data$store)
num.stores <- length(store.names)
PARAMS.BY.STORE <- matrix(NA, nrow=num.stores, ncol=4)
name <- toString(store.names[i])
store.data <- data[which(data$store==name),]
refer=list(name=name)
# Set up JAGS model over 3 variables.
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=500000, thin=1000)
par(mfrow=c(4, 2))
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.refer$name ~ beta[i]))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
help(bquote)
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
for (i in 1:4) {
ref=list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote("" ~ .(ref$name) ~beta == .(ref$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l", main=paste(name))
}
par(mfrow=c(4, 2))
for (i in 1:4) {
ref=list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(ref$name) ~ beta == .(ref$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref$name) ~ beta == .(ref$i)))
}
dim(jagsfit$beta[,,1])
rowMeans(jagsfit$beta[,,1])
name <- toString(store.names[i])
store.data <- data[which(data$store==name),]
name
store.data
vars <- c("log.a", "b", "g", "d")
par(mfrow=c(4, 2))
for (i in 1:4) {
ref <- list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(ref$name) ~ "var" == .(ref$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref$name) ~ beta == .(ref$i)))
}
par(mfrow=c(4, 2))
ref1 <- c("log.a", "b", "g", "d")
for (i in 1:4) {
ref2 <- list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(ref2$name) ~ ref1[i] == .(ref2$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref$name) ~ beta == .(ref$i)))
}
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref1 <- c("log.a", "b", "g", "d")
for (i in 1:4) {
ref2 <- list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(ref2$name) ~ .(ref1[i]) == .(ref2$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref$name) ~ beta == .(ref$i)))
}
par(mfrow=c(4, 2))
ref1 <- c("log.a", "b", "g", "d")
for (i in 1:4) {
ref2 <- list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(ref2$name) ~ .(ref1[i]) == .(ref2$i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref2$name) ~ .(ref1[i]) == .(ref2$i)))
}
rowMeans(jagsfit[,,1])
mean.params <- rowMeans(jagsfit$beta[,,1])
mean.params
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref1 <- c("log.a", "b", "g", "d")
for (i in 1:4) {
ref2 <- list(name=name, i=i)
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(ref2$name) ~ .(ref1[i]) == .(ref2$i)))
}
par(mfrow=c(4, 2))
ref <- c("log.a", "b", "g", "d")
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
}
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=50000, thin=1000)
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref <- c("log.a", "b", "g", "d")
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
}
mean.params <- rowMeans(jagsfit$beta[,,1])
mean.params
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=50000, thin=100)
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref <- c("log.a", "b", "g", "d")
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
}
mean.params <- rowMeans(jagsfit$beta[,,1])
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=200000, thin=1000)
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref <- c("log.a", "b", "g", "d")
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
}
mean.params <- rowMeans(jagsfit$beta[,,1])
mean.params
library(rjags)
library(boot)
library(VGAM)
library(MASS)
# Fetch and prepare data.
path <- paste("~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/",
"hierarch-shrinkage/cheese", sep="")
setwd(path)
data <- read.csv("cheese.csv")
data$log.Q <- log(data$vol)
data$log.P <- log(data$price)
attach(data)
n <- dim(data)[1]
store.names <- unique(data$store)
# Execute Gibbs sampler for all stores.
Execute <- function() {
num.stores <- length(store.names)
# Make container for store name, and means of 4 vars: log.a, b, g, d.
PARAMS.BY.STORE <- matrix(NA, nrow=num.stores, ncol=5)
for (i in 1:num.stores) {
name <- toString(store.names[i])
store.data <- data[which(data$store==name),]
PARAMS.BY.STORE[i,] <- c(name, Gibbs(store.data, name))
}
}
Gibbs <- function(store.data, name) {
# Set up JAGS model over 3 variables.
jagsmodel <- jags.model(file="cheese-jags-model.txt",
data=list(LOG.Q=store.data$log.Q,
log.P=store.data$log.P,
disp=store.data$disp,
cross=store.data$log.P*store.data$disp,
N=length(store.data$log.Q)),
n.chains=2)
# Fit jagsmodel.
jagsfit <- jags.samples(jagsmodel,
variable.names=c("beta"),
n.iter=200000, thin=1000)
# Create traceplots for beta chains.
par(mfrow=c(4, 2))
ref <- c("log.a", "b", "g", "d")
for (i in 1:4) {
# jagsfit$var takes three arguments: parameter, row, chain.
plot(jagsfit$beta[i,,1], type="l", col="red", ylab="",
main=bquote(.(name) ~ .(ref[i]) == .(i)))
lines(jagsfit$beta[i,,2], type="l", col="blue")
plot(density(jagsfit$beta[i,,]), type="l",
main=bquote(.(name) ~ .(ref1[i]) == .(i)))
}
mean.params <- rowMeans(jagsfit$beta[,,1])
return (mean.params)
}
Execute()
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/hierarch-shrinkage/cheese/cheese-jags.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/hierarch-shrinkage/cheese/cheese-jags.R', echo=TRUE)
source('~/Google Drive/2. SPRING 2015/STAT MOD 2 - Prof Scott/hierarch-shrinkage/cheese/cheese-jags.R', echo=TRUE)
PARAMS.BY.STORE
PARAMS.BY.STORE
PARAMS.BY.STORE
new <- round(PARAMS.BY.STORE,2)
typeof(PARAMS.BY.STORE)
as.matrix(PARAMS.BY.STORE)
round(as.matrix(PARAMS.BY.STORE),2
)
mean.params <- rowMeans(jagsfit$beta[,,1])
PARAMS.BY.STORE
as.matrix(PARAMS.BY.STORE)
new <- as.matrix(PARAMS.BY.STORE)
typeof(new)
new[80:88,]
